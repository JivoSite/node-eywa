
                                    Eywa

   Eywa -- это сеть, через которую взаимодействуют подключенные к ней клиенты.
   Взаимодействие осуществляется путем отправки запроса, с подтверждением
   получения или без него, от одного клиента другому. Клиентские приложения
   используют модуль называемый axon.
   Узлы сети, к которым подключаются клиенты, называются neuron. Эти узлы
   связаны друг с другом, сообщение от клиента адресованное другому клиенту,
   который может быть подключен к любому другому узлу сети, проходит максимум
   через 2 узла сети, т.е. выбирается самый короткий маршрут.

Простейший пример использования

   Минимальный состав сети: 1 узел и 2 клиента, клиент может быть и один, но
   тогда сам себе он будет слать сообщения без использования сети.
   В корне репозитория локальный neuron запускается командой:

      $ ./launch.sh --neuron

   Запуск двух клиентов, в разных окнах терминала:

      $ ./launch.sh //client1@
      $ ./launch.sh //client2@

   После подключения, в терминале первого клиента появляется приглашение:

      client1> <Tab>

   Клавиша табуляции используется для автодополнения, если нажать <Tab> в
   пустом окне ввода, будет напечатана подсказка по именам клиентов в сети:

      client1>
      client1  client2

   Внутренние команды клиентской оболочки начинаются с точки, для получения
   списка внутренних команд следует ввести .<Tab> :

      client1> .<Tab>
      .help   .list   .read   .save   .clear  .exit

   Назначение внутренних команд:

      .help
         печатает текст этого справочного файла;

      .list
         печатает сортированный список клиентов сети;

      .read
         печатает пропущенные (в то время, когда терминал был занят вводом)
         сообщения, число таких соощений отображается в приглашении комадной
         строки после символа + (например, client1+42> );

      .save
         сохраняет текущие настройки в домашней директории пользователя, для их
         автоматической загрузки при следующем запуске без аргументов;

      .clear
         очистка экрана терминала;

      .exit
         выход из программы;

   Для отправки сообщения от client1 к client2, следует ввести получателя,
   текст сообщения и нажать <Enter>:

      client1> client2 Привет, мир!<Enter>

Пример использования клиентского модуля axon в nodejs

   // подключение модуля, конструктор
   const Axon = require('path/to/this/module/directory/');

   const options = // необязательные опции
   {
      test : false, // проверка аргументов подключение и отключение
      net  :        // временные параметры в секундах
      {
         ping   : 3, // интервал отправки пинга при простое
         send   : 3, // интервал повторной отправки сообщения
         kill   : 5, // переподключение, если за это время не было сообщений
         retry  : 3, // число повторных отправок сообщения без ответа
         length : 0  // ограничение максимальной длины сообщения в байтах
      }
   };
   const observer = // предоставляет API для клиентов сети
   {
      method : function ()
      {
         console.log('observer.method', arguments);
         return 'OK';
      },
      object :
      {
         boolean : true,
         number  : 42,
         string  : 'example',
         void    : (void 0)
      },
      array : [ 1, 2, 3, ]
   };

   // создание экземпляра клиентского модуля
   const axon = new Axon(options, observer);

   /* подписка на события */
   // восстановление подключения после разрыва
   axon.onhello = function () { console.log('onhello'); };
   // разрыв подключения
   axon.onidle  = function (err) { console.error('onidle', err); };
   // закрытие подключения при использовании axon.close()
   axon.onclose = function (err) { console.error('onclose', err); };
   // ошибка
   axon.onerror = function (err) { console.error('onerror', err); };
   // открытие подключения
   axon.onopen  = function ()
   {
      console.log('onopen');
      console.log('my id', axon.info('ids'));

      /* отправка запроса клиенту с именем 'client',
       * методу 'method' передается 3 аргумента.
       * если последний аргумент функция, на запрос приходит ответ
       * первым аргументом в эту функцию,
       * если response === axon.BREAK,
       * значит запрос невозможно доставить получателю
       */
      axon.send('client.method', 'example', 42, true, function (response)
      {
         console.log('client.method', response);
      });
      axon.send('client.object.number', 36.6);
      axon.send('client.object.number', function (response)
      {
         console.log('client.object.number', response);
      });
      axon.send('client.', function (response)
      {
         console.log('client.', response);
      });
      axon.send('client', function (response)
      {
         console.log('client', response);
      });
   };

   // открытие подключения к сети
   axon.open('ion://foo:bar:baz@localhost:1024/');

Заключение

   В планах доработки документация, пишите пожалуйста ваши пожелания.
